name: CreateAzureWebApp     

env:
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'              # set this to the path to your web app project
  AZURE_WEBAPP_NAME: 'mmce-bmiPortal'

#on:
# workflow_dispatch:        

on:
  push:
    paths-ignore:
      - IAC-Templates/**
      - .github/workflows/**
 #   branches: [ develop ]

jobs:

  check-branch-environment: 
    runs-on: ubuntu-latest
    steps:
    - name: Branch name
      run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

    - name: Check develop
      run: if ${{ env.Branch }}=develop echo DEPLOY_TO=develop >> $GITHUB_ENV

    - name: Check qa
      run: if ${{ env.Branch }}=release echo DEPLOY_TO=staging >> $GITHUB_ENV

    - name: Check develop
      run: if ${{ env.Branch }}=master echo DEPLOY_TO=production >> $GITHUB_ENV
      
  build-and-deploy:
    needs: check-branch-environment
    runs-on: ubuntu-latest
    environment: ${{ env.DEPLOY_TO }}
    steps:
    - name: Branch name
      run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

    - name: Output branch-name
      run: echo running on branch ${{ env.Branch }}
      
      # Checkout code
    - uses: actions/checkout@main
      with:
        ref: ${{ env.Branch }}

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

#    - name: Generate random WebAppName
#      run: echo AZURE_WEBAPP_NAME=bmi-$(openssl rand -hex 2) >> $GITHUB_ENV
      
#    - name: Set URI Variable  
#      run: echo URI=https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net >> $GITHUB_ENV

      # Deploy ARM template

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    - name: Build for Release
      run: dotnet build --configuration Release
    - name: Run unit tests
      run: dotnet test TestProject1/TestProject1.csproj --no-restore --collect "Code coverage" -l:trx
  
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
       name: MS Tests                  
       path: '**.trx'
       reporter: 'dotnet-trx'                     
       artifact: ''

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                       
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} 
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
        slot-name: ${{ secrets.AZURE_WEBAPP_SLOT }} 
        

# Run Zap Scan on deployed image
    - name: Pull Docker image for ZAP
      run: docker pull owasp/zap2docker-weekly

    - name: Run baseline scan
      run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net -I -r zapreport.html
  
    - uses: actions/upload-artifact@v2
      name: upload ZAP report
      with:
        name: ZAPreport
        path: /report/zapreport.html

# Run K6 Load scan

    - name: Run k6 cloud test
      uses: k6io/action@v0.1
      with:
        filename: k6/perftest1.js
        cloud: true
        token: ${{ secrets.K6_CLOUD_API_TOKEN }}
