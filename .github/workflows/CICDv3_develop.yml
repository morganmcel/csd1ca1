name: CreateAzureWebApp     

env:
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'              # set this to the path to your web app project
  AZURE_WEBAPP_NAME: 'mmce-bmiPortal'
  GH_ENVIRONMENT: 'develop'
  AZURE_ENVIRONMENT: 'dev'

#on:
# workflow_dispatch:        

on:
  push:
    paths-ignore:
      - IAC-Templates/**
      - .github/workflows/**
    branches: [ develop ]

jobs:
  build-and-deploy:
    needs: dependency_check
    runs-on: ubuntu-latest
    environment: develop
    steps:
    - name: Branch name
      run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

    - name: Output branch-name
      run: echo running on branch ${{ env.Branch }}
      
      # Checkout code
    - uses: actions/checkout@main
      with:
        ref: ${{ env.Branch }}

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy ARM template

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    - name: Build for Release
      run: dotnet build --configuration Release
    - name: Run unit tests
      run: dotnet test TestProject1/TestProject1.csproj --no-restore --collect "Code coverage" -l:trx
  
    - name: Publish Unit Test Results
      uses: dorny/test-reporter@v1
      with:
       name: MS Tests                  
       path: '**.trx'
       reporter: 'dotnet-trx'                     
       artifact: ''

    - name: Publish
      run: dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 

# Deploy to Azure Web apps
    - name: Run Azure webapp deploy action using publish profile credentials
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}                       
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} 
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
        slot-name: ${{ secrets.AZURE_WEBAPP_SLOT }} 

# Run Zap Scan on deployed image
  zap_pen_test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:

    - name: Pull Docker image for ZAP
      run: docker pull owasp/zap2docker-weekly

    - name: Run baseline scan
      run: docker run -v /report:/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-baseline.py -t https://${{ env.AZURE_WEBAPP_NAME }}-${{ env.AZURE_ENVIRONMENT }}.azurewebsites.net -I -r zapreport.html
  
    - name: upload ZAP report
      uses: actions/upload-artifact@v2
      with:
        name: ZAPreport
        path: /report/zapreport.html

# Run K6 Load scan
  k6_performance_test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Branch name
      run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

    - name: Output branch-name
      run: echo running on branch ${{ env.Branch }}
      
      # Checkout code
    - name: Checkout code
      uses: actions/checkout@main
      with:
        ref: ${{ env.Branch }}

    - name: Run k6 cloud test
      uses: k6io/action@v0.1
      with:
        filename: k6/perftest1.js
        cloud: true
        token: ${{ secrets.K6_CLOUD_API_TOKEN }}

  dependency_check:
    runs-on: ubuntu-latest
    steps:
    - name: Branch name
      run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

    - name: Output branch-name
      run: echo running on branch ${{ env.Branch }}
      
      # Checkout code
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ env.Branch }}
    - name: Checkout
      uses: actions/checkout@v2

    - name: Depcheck
      uses: dependency-check/Dependency-Check_Action@main
      id: Depcheck
      with:
          project: 'BMI'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 7            
          # fail if CVSS score (CVE scoring system) is High >=7
          
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  run_sonarcloud_scans:
    name: Run SonarCloud Scans
    runs-on: windows-latest
    steps:
      - name: Branch name
        run: echo Branch=${GITHUB_REF##*/} >> $GITHUB_ENV

      - name: Output branch-name
        run: echo running on branch ${{ env.Branch }}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ env.Branch }}
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"MScDevOps" /o:"morganmc" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
